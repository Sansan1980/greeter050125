package com.skypro.greeter050125.service;

import org.springframework.stereotype.Service;

import java.util.Random;
// Как работают два конструктора

//В приведенном вами коде два конструктора выполняют разные задачи в зависимости от того, какой из них вызывается при создании объекта класса `ServiceHello`.
//
//### Первый конструктор:
//```java
//public ServiceHello() {
//    this.random = new Random();
//}
//```
//Этот конструктор не принимает параметров и создает новый объект `Random`, который используется для генерации случайных чисел. В данном случае, объект `Random` создается внутри конструктора, и он инициализирует поле `random` в классе.
//
//### Второй конструктор:
//```java
//public ServiceHello(Random random) {
//    this.random = random;
//}
//```
//Этот конструктор принимает уже существующий объект `Random` в качестве параметра и присваивает его полю `random`. Таким образом, вы можете использовать уже заранее настроенный объект `Random`, например, если вы хотите контролировать, как генерируются случайные числа (например, используя фиксированный seed или какой-то другой механизм случайных чисел).
//
//### Как это работает в контексте класса:
//
//- При создании объекта с использованием первого конструктора:
//  ```java
//  ServiceHello service = new ServiceHello();
//  ```
//  будет создан новый объект `Random`, который будет использоваться для генерации случайных чисел внутри класса.
//
//- При создании объекта с использованием второго конструктора:
//  ```java
//  Random customRandom = new Random(1234);  // Пример использования seed
//  ServiceHello service = new ServiceHello(customRandom);
//  ```
//  будет использован переданный объект `Random` для генерации случайных чисел, и вы можете заранее контролировать, как будет генерироваться случайность (например, за счет использования одинакового seed в разных местах).
//
//### Метод `randomHello`:
//Метод `randomHello` использует объект `Random` для получения случайного числа в диапазоне от 1 до 4 (включительно) с помощью `random.nextInt(1, 5)`, и в зависимости от этого числа выбирается одна из строк (приветствий):
//- `1 -> "Hello"`
//- `2 -> "Privet"`
//- `3 -> "Salyt"`
//- `default -> "Hay"`
//
//Это позволяет создать случайное приветствие на основе числа, которое генерирует объект `Random`.
//
//### Пример:
//1. Если вы используете первый конструктор (без параметров), то каждый раз будет использоваться новый объект `Random` с системным временем для генерации случайных чисел.
//2. Если используете второй конструктор, то вы можете передать заранее настроенный объект `Random`, что позволит вам, например, получать одинаковое случайное поведение в разных запусках программы, если передаете одинаковый seed.
//
//Таким образом, оба конструктора предоставляют гибкость в том, как будет генерироваться случайность в вашем классе.
@Service
public class ServiceHello {
    private final Random random;

    public  ServiceHello(){
        this.random = new Random();//это для GreeterServiceTest для инициализации инжекции поля greeterServise
    }
    public ServiceHello(Random randomMock){//(randomMock - показал что и откуда приходит) //это для теста ServiseHelloTest для
        // инициализации инжекции поля  serviceHello //public class ServiceHelloTest
        this.random = randomMock;
    }
    public String randomHello() {
        return switch (random.nextInt(1, 5)) {
            case 1-> "Hello";
            case 2-> "Privet";
            case 3-> "Salyt";
            default -> "Hay";
        };
    }

}
